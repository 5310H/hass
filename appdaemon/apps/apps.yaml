HassStatesSave:
  module: hass_states_save
  class: HassStatesSave
  path: /home/homeassistant/.homeassistant/hass_saved_states.ini
  isloaded_switch: input_boolean.hass_saved_states_loaded
  constrain_input_boolean: input_boolean.hass_saved_states_loaded

HassStatesLoad:
  module: hass_states_load
  class: HassStatesLoad
  path: /home/homeassistant/.homeassistant/hass_saved_states.ini
  isloaded_switch: input_boolean.hass_saved_states_loaded

schedy_heating:
  module: hass_apps_loader
  class: SchedyApp
  debug: false

  actor_type: thermostat

  # -----------------------------------------------
  # Common for all rooms
  # -----------------------------------------------
  schedule_prepend:
  # Valve maintenance
# Replaced by HA automation and setting climate presets; kept for evidence
#  - v: 28
#    rules:
#    - weekdays: 4
#      rules:
#      - { start: "10:21", end: "10:29" }
  # Master switch
  - x: "OFF if is_off('binary_sensor.heating_enabled') else Next()"
  # Open windows / doors
  - x: "Mark(OFF, Mark.OVERLAY) if not is_empty(filter_entities('binary_sensor', state='on', window_room=room_name)) else Next()"

  watched_entities:
  - binary_sensor.heating_enabled
  - binary_sensor.workday_status
  - sensor.today_minutes

  rooms:
    # -----------------------------------------------
    # Plan for bedroom
    # -----------------------------------------------
    bedroom:
      rescheduling_delay: 120
      actors:
        climate.eurotronic_eur_spiritz_wall_radiator_thermostat_mode:

      watched_entities:
      #- binary_sensor.0x00158d0001f406fb_contact
      - binary_sensor.bedroom_window_delayed
      - input_number.bedroom_high_temperature
      - input_number.bedroom_low_temperature
      - input_boolean.bedroom_work_first_active
      - input_boolean.bedroom_work_second_active
      - input_boolean.bedroom_free_first_active
      - input_boolean.bedroom_free_second_active
      - sensor.bedroom_work_first_on
      - sensor.bedroom_work_first_off
      - sensor.bedroom_work_second_on
      - sensor.bedroom_work_second_off
      - sensor.bedroom_free_first_on
      - sensor.bedroom_free_first_off
      - sensor.bedroom_free_second_on
      - sensor.bedroom_free_second_off

      schedule:
      # Work day, first interval of high temperature
      - x: state("input_number.bedroom_high_temperature") if (state("input_boolean.bedroom_work_first_active") == "on") and (state("binary_sensor.workday_status") == "on") and (time.hour*60+time.minute+1) in range(int(state("sensor.bedroom_work_first_on")), int(state("sensor.bedroom_work_first_off"))) else Next()

      # Work day, second interval of high temperature
      - x: state("input_number.bedroom_high_temperature") if (state("input_boolean.bedroom_work_second_active") == "on") and (state("binary_sensor.workday_status") == "on") and (time.hour*60+time.minute+1) in range(int(state("sensor.bedroom_work_second_on")), int(state("sensor.bedroom_work_second_off"))) else Next()

      # Free day, first interval of high temperature
      - x: state("input_number.bedroom_high_temperature") if (state("input_boolean.bedroom_free_first_active") == "on") and (state("binary_sensor.workday_status") == "off") and (time.hour*60+time.minute+1) in range(int(state("sensor.bedroom_free_first_on")), int(state("sensor.bedroom_free_first_off"))) else Next()

      # Free day, second interval of high temperature
      - x: state("input_number.bedroom_high_temperature") if (state("input_boolean.bedroom_free_second_active") == "on") and (state("binary_sensor.workday_status") == "off") and (time.hour*60+time.minute+1)in range(int(state("sensor.bedroom_free_second_on")), int(state("sensor.bedroom_free_second_off"))) else Next()

      # At all other times, set temperature to low value
      - x: state("input_number.bedroom_low_temperature")

    # -----------------------------------------------
    # Plan for living room
    # -----------------------------------------------
    living:
      rescheduling_delay: 120
      actors:
        climate.eurotronic_eur_spiritz_wall_radiator_thermostat_mode_3:

      watched_entities:
      #- binary_sensor.0x00158d0001b95a13_contact
      #- binary_sensor.0x00158d0001b959d8_contact
      - binary_sensor.living_window_delayed
      - binary_sensor.living_door_delayed
      - input_number.living_high_temperature
      - input_number.living_low_temperature
      - input_boolean.living_work_first_active
      - input_boolean.living_work_second_active
      - input_boolean.living_free_first_active
      - input_boolean.living_free_second_active
      - sensor.living_work_first_on
      - sensor.living_work_first_off
      - sensor.living_work_second_on
      - sensor.living_work_second_off
      - sensor.living_free_first_on
      - sensor.living_free_first_off
      - sensor.living_free_second_on
      - sensor.living_free_second_off

      schedule:
      # Work day, first interval of high temperature
      - x: state("input_number.living_high_temperature") if (state("input_boolean.living_work_first_active") == "on") and (state("binary_sensor.workday_status") == "on") and (time.hour*60+time.minute+1) in range(int(state("sensor.living_work_first_on")), int(state("sensor.living_work_first_off"))) else Next()

      # Work day, second interval of high temperature
      - x: state("input_number.living_high_temperature") if (state("input_boolean.living_work_second_active") == "on") and (state("binary_sensor.workday_status") == "on") and (time.hour*60+time.minute+1) in range(int(state("sensor.living_work_second_on")), int(state("sensor.living_work_second_off"))) else Next()

      # Free day, first interval of high temperature
      - x: state("input_number.living_high_temperature") if (state("input_boolean.living_free_first_active") == "on") and (state("binary_sensor.workday_status") == "off") and (time.hour*60+time.minute+1) in range(int(state("sensor.living_free_first_on")), int(state("sensor.living_free_first_off"))) else Next()

      # Free day, second interval of high temperature
      - x: state("input_number.living_high_temperature") if (state("input_boolean.living_free_second_active") == "on") and (state("binary_sensor.workday_status") == "off") and (time.hour*60+time.minute+1)in range(int(state("sensor.living_free_second_on")), int(state("sensor.living_free_second_off"))) else Next()

      # At all other times, set temperature to low value
      - x: state("input_number.living_low_temperature")

    # -----------------------------------------------
    # Plan for kids room
    # -----------------------------------------------
    kids:
      rescheduling_delay: 120
      actors:
        climate.eurotronic_eur_spiritz_wall_radiator_thermostat_mode_2:

      watched_entities:
      #- binary_sensor.door_window_sensor_158d0001b7bc15
      #- binary_sensor.door_window_sensor_158d0001de657f
      - binary_sensor.kids_window_delayed
      - binary_sensor.kids_door_delayed
      - input_number.kids_high_temperature
      - input_number.kids_low_temperature
      - input_boolean.kids_work_first_active
      - input_boolean.kids_work_second_active
      - input_boolean.kids_free_first_active
      - input_boolean.kids_free_second_active
      - sensor.kids_work_first_on
      - sensor.kids_work_first_off
      - sensor.kids_work_second_on
      - sensor.kids_work_second_off
      - sensor.kids_free_first_on
      - sensor.kids_free_first_off
      - sensor.kids_free_second_on
      - sensor.kids_free_second_off

      schedule:
      # Work day, first interval of high temperature
      - x: state("input_number.kids_high_temperature") if (state("input_boolean.kids_work_first_active") == "on") and (state("binary_sensor.workday_status") == "on") and (time.hour*60+time.minute+1) in range(int(state("sensor.kids_work_first_on")), int(state("sensor.kids_work_first_off"))) else Next()

      # Work day, second interval of high temperature
      - x: state("input_number.kids_high_temperature") if (state("input_boolean.kids_work_second_active") == "on") and (state("binary_sensor.workday_status") == "on") and (time.hour*60+time.minute+1) in range(int(state("sensor.kids_work_second_on")), int(state("sensor.kids_work_second_off"))) else Next()

      # Free day, first interval of high temperature
      - x: state("input_number.kids_high_temperature") if (state("input_boolean.kids_free_first_active") == "on") and (state("binary_sensor.workday_status") == "off") and (time.hour*60+time.minute+1) in range(int(state("sensor.kids_free_first_on")), int(state("sensor.kids_free_first_off"))) else Next()

      # Free day, second interval of high temperature
      - x: state("input_number.kids_high_temperature") if (state("input_boolean.kids_free_second_active") == "on") and (state("binary_sensor.workday_status") == "off") and (time.hour*60+time.minute+1)in range(int(state("sensor.kids_free_second_on")), int(state("sensor.kids_free_second_off"))) else Next()

      # At all other times, set temperature to low value
      - x: state("input_number.kids_low_temperature")
