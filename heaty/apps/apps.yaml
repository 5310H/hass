heaty:
  module: hass_apps_loader
  class: HeatyApp
  master_switch: input_boolean.heating_enabled
  rooms:
    bedroom:
      thermostats:
        climate.eurotronic_eur_spiritz_wall_radiator_thermostat_heat:
      window_sensors:
        binary_sensor.door_window_sensor_158d0001f406fb:
          open_state: "on"
      schedule:
      # Valve maintenance
      - temp: 28
        weekdays: 4
        start: "10:21"
        end: "10:28"

      # Work day, first interval of high temperature
      - temp: app.get_state("input_number.bedroom_high_temperature") if (app.get_state("input_boolean.bedroom_work_first_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "on") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.bedroom_work_first_on")), int(app.get_state("sensor.bedroom_work_first_off"))) else Ignore()

      # Work day, second interval of high temperature
      - temp: app.get_state("input_number.bedroom_high_temperature") if (app.get_state("input_boolean.bedroom_work_second_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "on") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.bedroom_work_second_on")), int(app.get_state("sensor.bedroom_work_second_off"))) else Ignore()

      # Free day, first interval of high temperature
      - temp: app.get_state("input_number.bedroom_high_temperature") if (app.get_state("input_boolean.bedroom_free_first_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "off") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.bedroom_free_first_on")), int(app.get_state("sensor.bedroom_free_first_off"))) else Ignore()

      # Free day, second interval of high temperature
      - temp: app.get_state("input_number.bedroom_high_temperature") if (app.get_state("input_boolean.bedroom_free_second_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "off") and (time.hour*60+time.minute+1)in range(int(app.get_state("sensor.bedroom_free_second_on")), int(app.get_state("sensor.bedroom_free_second_off"))) else Ignore()

      # At all other times, set temperature to low value
      - temp: app.get_state("input_number.bedroom_low_temperature")

    kids:
      thermostats:
        climate.eurotronic_eur_spiritz_wall_radiator_thermostat_heat_2:
      window_sensors:
        binary_sensor.door_window_sensor_158d0001b7bc15:
          open_state: "on"
        binary_sensor.door_window_sensor_158d0001de657f:
          open_state: "on"
      schedule:
      # Valve maintenance
      - temp: 28
        weekdays: 4
        start: "10:21"
        end: "10:28"

      # Work day, first interval of high temperature
      - temp: app.get_state("input_number.kids_high_temperature") if (app.get_state("input_boolean.kids_work_first_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "on") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.kids_work_first_on")), int(app.get_state("sensor.kids_work_first_off"))) else Ignore()

      # Work day, second interval of high temperature
      - temp: app.get_state("input_number.kids_high_temperature") if (app.get_state("input_boolean.kids_work_second_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "on") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.kids_work_second_on")), int(app.get_state("sensor.kids_work_second_off"))) else Ignore()

      # Free day, first interval of high temperature
      - temp: app.get_state("input_number.kids_high_temperature") if (app.get_state("input_boolean.kids_free_first_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "off") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.kids_free_first_on")), int(app.get_state("sensor.kids_free_first_off"))) else Ignore()

      # Free day, second interval of high temperature
      - temp: app.get_state("input_number.kids_high_temperature") if (app.get_state("input_boolean.kids_free_second_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "off") and (time.hour*60+time.minute+1)in range(int(app.get_state("sensor.kids_free_second_on")), int(app.get_state("sensor.kids_free_second_off"))) else Ignore()

      # At all other times, set temperature to low value
      - temp: app.get_state("input_number.kids_low_temperature")

    living:
      thermostats:
        climate.eurotronic_eur_spiritz_wall_radiator_thermostat_heat_3:
      window_sensors:
        binary_sensor.door_window_sensor_158d0001b95a13:
          open_state: "on"
        binary_sensor.door_window_sensor_158d0001b959d8:
          open_state: "on"
      schedule:
      # Valve maintenance
      - temp: 28
        weekdays: 4
        start: "10:21"
        end: "10:28"

      # Work day, first interval of high temperature
      - temp: app.get_state("input_number.living_high_temperature") if (app.get_state("input_boolean.living_work_first_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "on") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.living_work_first_on")), int(app.get_state("sensor.living_work_first_off"))) else Ignore()

      # Work day, second interval of high temperature
      - temp: app.get_state("input_number.living_high_temperature") if (app.get_state("input_boolean.living_work_second_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "on") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.living_work_second_on")), int(app.get_state("sensor.living_work_second_off"))) else Ignore()

      # Free day, first interval of high temperature
      - temp: app.get_state("input_number.living_high_temperature") if (app.get_state("input_boolean.living_free_first_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "off") and (time.hour*60+time.minute+1) in range(int(app.get_state("sensor.living_free_first_on")), int(app.get_state("sensor.living_free_first_off"))) else Ignore()

      # Free day, second interval of high temperature
      - temp: app.get_state("input_number.living_high_temperature") if (app.get_state("input_boolean.living_free_second_active") == "on") and (app.get_state("binary_sensor.workday_sensor") == "off") and (time.hour*60+time.minute+1)in range(int(app.get_state("sensor.living_free_second_on")), int(app.get_state("sensor.living_free_second_off"))) else Ignore()

      # At all other times, set temperature to low value
      - temp: app.get_state("input_number.living_low_temperature")
